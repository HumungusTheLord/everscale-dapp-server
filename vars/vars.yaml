dapp_dir: "/opt/dapp"

# chrony
ntp_server: "pool.ntp.org"

# System user/group
everscale_group: "xnode"
everscale_user: "xnode"

# zstd parameters
zstd_version: 1.5.1

# Rust parameters
## Rust versior
rustup_default_toolchain: "1.68.2"
rustup_mirror : https://static.rust-lang.org/rustup/dist
rustup_platform : x86_64-unknown-linux-gnu
## Rust flags compile environment
rust_flags: "-C target-cpu=native"

# single hostname var for all docker-compose env's templates
# for example:
# hostname: "dapp.host.dom"
# hostname: "{{ inventory_hostname }}"
hostname: "dapp.company.tld"

# Kernel parameters
sysctl_set: true  # or 'false'

# Use these parameters as example! Specify kernel options for your system. 
## Specified default options was optimized for dApp.
sysctl_conf:
  ever_node:
    - { name: "net.ipv6.conf.all.disable_ipv6", value: "1" }
    - { name: "net.ipv6.conf.default.disable_ipv6", value: "1" }
    - { name: "net.ipv6.conf.lo.disable_ipv6", value: "1" }
    - { name: "net.core.rmem_max", value: "134217728" }
    - { name: "net.core.wmem_max", value: "134217728" }
    - { name: "net.core.rmem_default", value: "134217728" }
    - { name: "net.core.wmem_default", value: "134217728" }
    - { name: "net.ipv4.tcp_mem", value: "1048576 16777216 67108864" }
    - { name: "net.ipv4.tcp_rmem", value: "1048576 16777216 67108864" }
    - { name: "net.ipv4.tcp_wmem", value: "1048576 16777216 67108864" }
    - { name: "net.ipv4.udp_mem", value: "1048576 16777216 67108864" }
    - { name: "net.ipv4.udp_rmem_min", value: "1048576" }
    - { name: "net.ipv4.udp_wmem_min", value: "1048576" }
    - { name: "net.core.optmem_max", value: "134217728" }
    - { name: "net.core.somaxconn", value: "65535" }
    - { name: "net.core.netdev_max_backlog", value: "250000" }
    - { name: "net.ipv4.conf.all.rp_filter", value: "1" }
    - { name: "net.ipv4.conf.all.arp_filter", value: "1" }
    - { name: "net.ipv4.conf.all.arp_ignore", value: "1" }
    - { name: "net.ipv4.conf.all.arp_announce", value: "2" }
    - { name: "vm.overcommit_memory", value: "2" }
    - { name: "vm.overcommit_ratio", value: "100" }
    - { name: "vm.swappiness", value: "10" }
    - { name: "vm.vfs_cache_pressure", value: "200" }

# Max open file limit
set_limits: true  # or 'false'
soft_nofile: 65536
hard_nofile: 200000
soft_nproc: 65000
hard_nproc: 200000
memlock: "unlimited"


# Docker
#
docker_version: "20.10.24"
docker_network_name: "dapp_network"

# Docker logging options
# READ https://docs.docker.com/config/containers/logging/configure/
# WARNING! Containers must be recreated to submit daemon.json changes
docker_log_driver: json-file
docker_log_opts:
  max-size: "10m"
  max-file: "5"
  mode: "non-blocking"
  max-buffer-size: "10m"

# docker_log_driver: "gelf"
# docker_log_opts:
#   "gelf-address": "udp://1.2.3.4:12201"
#   "cache-disabled": "false"
#   "cache-max-size": "10m"
#   "cache-max-file": "5"
#   "mode": "non-blocking"
#   "max-buffer-size": "10m"

containerd_yum_version: "1.6.15"
containerd_deb_version: "1.6.15-1"

docker_debuntu_full_package_version: "5:{{ docker_version }}~3-0~{{ ansible_distribution | lower }}-{{ ansible_distribution_release }}"
docker_repo_url: https://download.docker.com/linux
docker_apt_gpg_key: "{{ docker_repo_url }}/{{ ansible_distribution | lower }}/gpg"
docker_apt_ignore_key_error: true
docker_apt_release_channel: stable
docker_apt_arch: amd64
docker_apt_repository: "deb [arch={{ docker_apt_arch }}] {{ docker_repo_url }}/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} {{ docker_apt_release_channel }}"




## Kafka
#
kafka_host: "kafka"
kafka_mem_limit: "32G"
kafka_port_internal: 9092
kafka_port_external: "{{ kafka_port_internal }}"
kafka_net: "{{ docker_network_name }}"

# ArangoDB (please make sure you've changed your "arangodb_password")
#
arangodb_port: 8529
arangodb_mem_limit: 16G
arangodb_net: "{{ docker_network_name }}"

arangodb_host: "arangodb"
arangoni_host: "arangoni"
arangodb_user: "root"
arangodb_password: "CH@NGE-ME!"
arangodb_database_name: "blockchain"

# Set this values as 30% of RAM in bytes
arangodb_rocksdb_block_cache_size: 10307921510
arangodb_rocksdb_total_write_buffer_size: 10307921510

arangodb_query_memory_limit: 512000000
# This value set as 20% of RAM in bytes
arangodb_cache_size: 6871947674

# var for letsencrypt
le_hostname: "{{ hostname }}"
le_email: "kewlhaxor@ever.live"

# proxy
#
proxy_net: "{{ docker_network_name }}"

# q-server (https://github.com/tonlabs/ton-q-server)
#
q_server_port: 4000
q_server_mem_limit: "5G"
q_server_net: "{{ docker_network_name }}"

# statsd
statsd_udp_port: 9125
statsd_tcp_port: 9102
statsd_domain: "statsd:"
statsd_net: "{{ docker_network_name }}"


# EVER node configuration
#
# Choose net: possible values are main, net, fld and rfld (all networks except 'main' are testnets)
ever_node_config: "main"

ever_node_global_config_URL_list:
  main:
    config_URL: "https://raw.githubusercontent.com/tonlabs/main.ton.dev/master/configs/ton-global.config.json"
    DAPP_address: "https://ever.live"
    DAPP_endpoints: "https://eri01.main.everos.dev,https://gra01.main.everos.dev,https://gra02.main.everos.dev,https://lim01.main.everos.dev,https://rbx01.main.everos.dev,https://main2.ton.dev,https://main3.ton.dev,https://main4.ton.dev"
  net:
    config_URL: "https://raw.githubusercontent.com/tonlabs/net.ton.dev/master/configs/ton-global.config.json"
    DAPP_address: "https://net.ever.live/"
    DAPP_endpoints: "https://net1.ton.dev,https://net5.ton.dev"
  fld:
    config_URL: "https://raw.githubusercontent.com/FreeTON-Network/fld.ton.dev/main/configs/fld.ton.dev/ton-global.config.json"
    DAPP_address: "https://gql.custler.net"
    DAPP_endpoints: "https://gql.custler.net"
  rfld:
    config_URL: "https://raw.githubusercontent.com/FreeTON-Network/custler.uninode/main/configs/rfld.ton.dev/ton-global.config.json"
    DAPP_address: "https://rfld.ever.live/"
    DAPP_endpoints: "https://rfld-dapp.itgold.io"

# systemd service name
ever_node_service_name: "ever-node"

# Set ever node service enabled for autostart after system restart: yes|no
ever_node_service_autostart: "yes"

# ever node service state after ansible script deploying: restarted|started|stopped
ever_node_service_state: "restarted"

# ever node directories:
# sources
ever_node_src_dir: "/usr/local/src/everscale"

# ever node work directory (topdir for configs/logs and node database)
ever_node_work_dir: "/var/ton-work"

# ever node log directory
ever_node_log_dir: "{{ ever_node_work_dir }}/logs"

# ever node config directory
ever_node_config_dir: "{{ ever_node_work_dir }}/configs"

# ever node database directory
ever_node_db_dir: "{{ ever_node_work_dir }}/rnode_db"

# ever node binary files location
ever_node_bin_dir: "/usr/local/bin"

# ever node tools binary files location
ever_node_tools_bin_dir: "/usr/local/bin"

# Get ever node commit id: https://github.com/tonlabs/ever-node/commits
ever_node_github_repo: "https://github.com/tonlabs/ever-node.git"
ever_node_github_commit_id: "master"

ever_node_sha2_native_enabled: true

# Recompile ever node binary without sources changes: false|true
ever_node_force_recompile: true

# Statsd exporter suport
ever_node_metrics_enabled: false

# MUST be 'true' if you deployment dapp server (i.e. always at this playbook).
ever_node_external_db_enabled: true

# ever node adnl port (udp)
ever_node_adnl_port: "30303"

# ever node console management port (tcp)
ever_node_console_port: "4825"

# Get freeever node tools commit id: https://github.com/tonlabs/ever-node-tools/commits"
ever_node_tools_github_repo: "https://github.com/tonlabs/ever-node-tools.git"
ever_node_tools_github_commit_id: "master"

# Recompile ever node tools binary without sources changes: false|true
ever_node_tools_force_recompile: false

# Get tonos cli commit id: https://github.com/tonlabs/tonos-cli/commits"
tonos_cli_github_repo: "https://github.com/tonlabs/tonos-cli.git"
tonos_cli_github_commit_id: "master"

# Recompile tonos-cli binary without sources changes: false|true
tonos_cli_force_recompile: false
