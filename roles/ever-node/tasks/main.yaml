---

- name: Create EVERSCALE user group
  group:
    name: "{{ everscale_group }}"
    state: present

- name: Create EVERSCALE user
  user:
    name: "{{ everscale_user }}"
    comment: "Everscale node user"
    group: "{{ everscale_group }}"
    shell: /bin/bash
    state: present
  register: everscale_user_created

- name: Include os specific tasks
  include_tasks: "{{ ansible_pkg_mgr }}.yml"

- name: Set home directory variable
  set_fact:
    everscale_user_home: "{{ everscale_user_created.home }}"

- name: Stats libzstd.so
  stat:
    path: "/usr/local/lib/libzstd.so.{{ zstd_version }}"
  register: libzstd_exists

- name: Download and extract zstd sources
  unarchive:
    src: 'https://github.com/facebook/zstd/releases/download/v{{ zstd_version }}/zstd-{{ zstd_version }}.tar.gz'
    dest: /usr/local/src
    remote_src: yes
  when: not libzstd_exists.stat.exists

- name: Compile zstd (if not exist)
  command: 'make install'
  args:
    chdir: '/usr/local/src/zstd-{{ zstd_version }}'
  when: not libzstd_exists.stat.exists

- name: Download Rust init
  get_url:
    url: '{{ rustup_mirror }}/{{ rustup_platform }}/rustup-init'
    dest: '/usr/local/bin/rustup-init'
    mode: u=rwx,g=rx,o=

- name: Install Rust
  command: '/usr/local/bin/rustup-init -y --default-toolchain {{ rustup_default_toolchain }}'

- name: Get Rust version
  command: '{{ ansible_env.HOME }}/.cargo/bin/rustc -V'
  changed_when: false
  register: rust_version

- name: Create ever node dirs
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ everscale_user }}"
    group: "{{ everscale_group }}"
    mode: u=rwx,g=rx,o=
  loop:
    - "{{ ever_node_work_dir }}"
    - "{{ ever_node_src_dir }}"
    - "{{ ever_node_log_dir }}"
    - "{{ ever_node_config_dir }}"
    - "{{ ever_node_db_dir }}"

- name: Get ever node sources
  git:
    repo: "{{ ever_node_github_repo }}"
    dest: "{{ ever_node_src_dir }}/ever_node"
    version: "{{ ever_node_github_commit_id }}"
    force: true
  register: ever_node_sources

- name: Updating EVER node submodules
  shell: |
    set -euo pipefail
    git submodule init
    git submodule update --recursive
    git submodule foreach 'git submodule init'
    git submodule foreach 'git submodule update  --recursive'
  args:
    executable: "/bin/bash"
    chdir: "{{ ever_node_src_dir }}/ever_node"

- name:  EVER node add profile optimization
  blockinfile: 
    path: "{{ ever_node_src_dir }}/ever_node/Cargo.toml"
    marker: "### ANSIBLE BLOCKINFILE 1 ####"
    insertafter: '\[profile\]'
    block:  |
      release = { lto = "fat", codegen-units = 1, panic = "abort" }
  when: ever_node_profile_opt_enabled

- name:  EVER node change binary name
  lineinfile: 
    path: "{{ ever_node_src_dir }}/ever_node/Cargo.toml"
    regexp: '^name ='
    line:  "name = 'ever_node'"
  
- name: Ever node add json output log support
  lineinfile:
    path: "{{ ever_node_src_dir }}/ever_node/Cargo.toml"
    regexp: '^log4rs ='
    line: "log4rs = { features = [ 'pattern_encoder', 'json_encoder' ], version = '1.2.0' }"

- name: Get EVER node tools sources
  git:
    repo: "{{ ever_node_tools_github_repo }}"
    dest: "{{ ever_node_src_dir }}/ever_node_tools"
    version: "{{ ever_node_tools_github_commit_id }}"
    force: true
  register: ever_node_tools_sources

- name: Updating EVER node tools submodules
  shell: |
    set -euo pipefail
    git submodule init
    git submodule update --recursive
    git submodule foreach 'git submodule init'
    git submodule foreach 'git submodule update  --recursive'
  args:
    executable: "/bin/bash"
    chdir: "{{ ever_node_src_dir }}/ever_node_tools"

- name: Get tonos-cli sources
  git:
    repo: "{{ tonos_cli_github_repo }}"
    dest: "{{ ever_node_src_dir }}/tonos_cli"
    version: "{{ tonos_cli_github_commit_id }}"
    force: true
  register: tonos_cli_sources

- name: Updating tonos-cli submodules
  shell: |
    set -euo pipefail
    git submodule init
    git submodule update --recursive
    git submodule foreach 'git submodule init'
    git submodule foreach 'git submodule update  --recursive'
  args:
    executable: "/bin/bash"
    chdir: "{{ ever_node_src_dir }}/tonos_cli"

- name: Clear debug directory
  file:
    path: "{{ ever_node_src_dir }}/debug"
    state: absent

- name: Build EVER node
  block:
    - name: Update repo deps for EVER node
      command: '{{ ansible_env.HOME }}/.cargo/bin/cargo update --manifest-path {{ ever_node_src_dir }}/ever_node/Cargo.toml'
    - name: Build repo | EVER node
      command: '{{ ansible_env.HOME }}/.cargo/bin/cargo build --manifest-path {{ ever_node_src_dir }}/ever_node/Cargo.toml --target-dir {{ ever_node_src_dir }} --release {% if ever_node_metrics_enabled == true %} --features metrics{% endif %} {% if ever_node_external_db_enabled == true %} --features external_db{% endif %}'
               ##{% if ever_node_compression_enabled == true %} --features compression{% endif %} ## Use it for node compression support
  when: ever_node_sources.changed or ever_node_force_recompile
  environment:
    RUSTFLAGS: "{{ rust_flags }}"
    RUST_VERSION: "{{ rust_version.stdout }}"
    GC_TON_NODE: "{{ ever_node_sources.after }}"
    ZSTD_LIB_DIR: "{% if ansible_pkg_mgr == 'dnf' %}/usr/local/lib{% elif ansible_pkg_mgr == 'apt' %}/usr/lib/x86_64-linux-gnu{% endif %}"
    PKG_CONFIG_PATH: "/usr/local/lib/pkgconfig"

- name: Build EVER node tools
  block:
    - name: Update repo deps | EVER node tools
      command: '{{ ansible_env.HOME }}/.cargo/bin/cargo update --manifest-path {{ ever_node_src_dir }}/ever_node_tools/Cargo.toml'
    - name: Build repo | EVER node tools
      command: '{{ ansible_env.HOME }}/.cargo/bin/cargo build --manifest-path {{ ever_node_src_dir }}/ever_node_tools/Cargo.toml --target-dir {{ ever_node_src_dir }} --release'
  when: ever_node_tools_sources.changed or ever_node_tools_force_recompile
  environment:
    RUSTFLAGS: "{{ rust_flags }}"
    ZSTD_LIB_DIR: "{% if ansible_pkg_mgr == 'dnf' %}/usr/local/lib{% elif ansible_pkg_mgr == 'apt' %}/usr/lib/x86_64-linux-gnu{% endif %}"
    PKG_CONFIG_PATH: "/usr/local/lib/pkgconfig"

- name: Build tonos-cli
  block:
    - name: Update repo deps | tonos-cli
      command: '{{ ansible_env.HOME }}/.cargo/bin/cargo update --manifest-path {{ ever_node_src_dir }}/tonos_cli/Cargo.toml'
    - name: Build repo | tonos cli
      command: '{{ ansible_env.HOME }}/.cargo/bin/cargo build --manifest-path {{ ever_node_src_dir }}/tonos_cli/Cargo.toml --target-dir {{ ever_node_src_dir }} --release'
  when: tonos_cli_sources.changed or tonos_cli_force_recompile
  environment:
    RUSTFLAGS: "{{ rust_flags }}"
    ZSTD_LIB_DIR: "{% if ansible_pkg_mgr == 'dnf' %}/usr/local/lib{% elif ansible_pkg_mgr == 'apt' %}/usr/lib/x86_64-linux-gnu{% endif %}"
    PKG_CONFIG_PATH: "/usr/local/lib/pkgconfig"

- name: Copy ever node tools binaries
  copy:
    src: "{{ ever_node_src_dir }}/release/{{ item }}"
    dest: "{{ ever_node_tools_bin_dir }}/{{ item }}"
    owner: "{{ everscale_user }}"
    group: "{{ everscale_group }}"
    mode: u=rwx,g=rx,o=
    remote_src: yes
  loop:
    - console
    - dhtscan
    - gendht
    - keygen
    - print
    - zerostate
    - adnl_resolve
    - adnl_ping
  when: ever_node_tools_sources.changed or ever_node_tools_force_recompile

- name: Copy tonos-cli binaries
  copy:
    src: "{{ ever_node_src_dir }}/release/tonos-cli"
    dest: "{{ ever_node_tools_bin_dir }}"
    owner: "{{ everscale_user }}"
    group: "{{ everscale_group }}"
    mode: u=rwx,g=rx,o=
    remote_src: yes
  when: tonos_cli_sources.changed or tonos_cli_force_recompile

- name: Create ever node systemd service
  template:
    src: "ever-node.service.j2"
    dest: "/etc/systemd/system/{{ ever_node_service_name }}.service"
    mode: u=rw,g=r,o=r
  notify: ever_systemd

- name: Copy ever node binaries
  copy:
    src: "{{ ever_node_src_dir }}/release/ever_node"
    dest: "{{ ever_node_bin_dir }}"
    owner: "{{ everscale_user }}"
    group: "{{ everscale_group }}"
    mode: u=rwx,g=rx,o=
    remote_src: yes
  when: ever_node_sources.changed or ever_node_force_recompile
  notify: ever_systemd

- name: "Check if {{ ever_node_config_dir }} dir is empty"
  find:
    paths: "{{ ever_node_config_dir }}"
    file_type: file
    patterns: '*'
  register: configDirNonEmpty

- name: Copy default ever node config
  copy:
    src: "{{ ever_node_src_dir }}/ever_node/configs/default_config.json"
    dest: "{{ ever_node_config_dir }}"
    owner: "{{ everscale_user }}"
    group: "{{ everscale_group }}"
    mode: u=rw,g=r,o=
    remote_src: yes
  notify: ever_systemd

- name: Copy logging config
  template:
    src: "log_cfg.yml.j2"
    dest: "{{ ever_node_config_dir }}/log_cfg.yml"
    owner: "{{ everscale_user }}"
    group: "{{ everscale_group }}"
    mode: u=rw,g=r,o=

- name: Get everscale global config 
  get_url:
    url: "{{ ever_node_global_config_URL_list[ever_node_config].config_URL }}"
    dest: "{{ ever_node_config_dir }}"
    owner: "{{ everscale_user }}"
    group: "{{ everscale_group }}"
    mode: u=rw,g=r,o=
  when: configDirNonEmpty.matched <= 3
  notify: ever_systemd

- name: Config tonos-cli
  command: "{{ item }}"
  args:
    chdir: "{{ ever_node_tools_bin_dir }}"
  loop:
    - "./tonos-cli config endpoint reset"
    - "./tonos-cli config endpoint add {{ ever_node_global_config_URL_list[ever_node_config].DAPP_address }} {{ ever_node_global_config_URL_list[ever_node_config].DAPP_endpoints }}"
    - "./tonos-cli config --url {{ ever_node_global_config_URL_list[ever_node_config].DAPP_address }}"
  when: configDirNonEmpty.matched <= 3

- name: Copy tonos-cli.conf.json to configs dir
  copy:
    src: "{{ ever_node_tools_bin_dir }}/tonos-cli.conf.json"
    dest: "{{ ever_node_config_dir }}/tonos-cli.conf.json"
    owner: "{{ everscale_user }}"
    group: "{{ everscale_group }}"
    mode: u=rw,g=r,o=
    remote_src: yes
  when: configDirNonEmpty.matched <= 3

- name: "Set lifetime to 600"
  shell: "{{ item }}"
  become: yes
  become_user: "{{ everscale_user }}"
  loop:
    - 'jq ".config.lifetime=600" "{{ ever_node_config_dir }}/tonos-cli.conf.json" > {{ ever_node_config_dir }}/tonos-cli.conf_tmp.json'
    - 'cat {{ ever_node_config_dir }}/tonos-cli.conf_tmp.json > {{ ever_node_config_dir }}/tonos-cli.conf.json'
  when: configDirNonEmpty.matched <= 3

- name: Remove tonos-cli.conf.json in tools dir
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ ever_node_config_dir }}/tonos-cli.conf_tmp.json"
    - "{{ ever_node_tools_bin_dir }}/tonos-cli.conf.json"

- name: Generate keys
  shell: "./keygen > {{ ever_node_config_dir }}/{{ ansible_hostname }}_client_keys.json"
  args:
    chdir: "{{ ever_node_tools_bin_dir }}"
  become: yes
  become_user: "{{ everscale_user }}"
  when: configDirNonEmpty.matched <= 3

- name: Generate ever node key config
  shell: "{{ ever_node_bin_dir }}/ever_node --configs {{ ever_node_config_dir }} --ckey \"$(jq -c .public {{ ever_node_config_dir }}/{{ ansible_hostname }}_client_keys.json)\" &"
  #args:
  #  creates: "{{ ever_node_config_dir }}/config.json"
  # async: 30
  # poll: 0
  become: yes
  become_user: "{{ everscale_user }}"
  register: ever_node_key_generated
  notify: ever_systemd
  when: configDirNonEmpty.matched <= 3

- name: Wait for console_config.json creation
  wait_for:
    path: "{{ ever_node_config_dir }}/console_config.json"
  when: ever_node_key_generated.changed

# - name: Kill nohup evern_node processes
#   shell: "kill -9 `jobs -l | awk '{print $2}'`"
#   become: yes
#   become_user: "{{ everscale_user }}"
#   when: ever_node_key_generated.changed
#   ignore_errors: true

- name: Configure console and node ports
  shell: "{{ item }}"
  become: yes
  become_user: "{{ everscale_user }}"
  loop:
    - "jq '.adnl_node.ip_address = \"0.0.0.0:{{ ever_node_adnl_port }}\"' {{ ever_node_config_dir }}/config.json > {{ ever_node_config_dir }}/config_tmp.json"
    - "jq '.control_server.address = \"127.0.0.1:{{ ever_node_console_port }}\"' {{ ever_node_config_dir }}/config_tmp.json > {{ ever_node_config_dir }}/config.json"
    - "jq '.server_address = \"127.0.0.1:{{ ever_node_console_port }}\"' {{ ever_node_config_dir }}/console_config.json > {{ ever_node_config_dir }}/console_config_tmp.json"
    - 'cat {{ ever_node_config_dir }}/console_config_tmp.json > {{ ever_node_config_dir }}/console_config.json'
  when: configDirNonEmpty.matched <= 3

- name: Configure ever node garbage collector settings (from node version 0.51.34+)
  shell: "{{ item }}"
  become: yes
  become_user: "{{ everscale_user }}"
  loop:
    - "jq '.gc.archives_life_time_hours = null' {{ ever_node_config_dir }}/config.json > {{ ever_node_config_dir }}/config_tmp.json"
    - "jq '.gc.enable_for_archives = true' {{ ever_node_config_dir }}/config_tmp.json > {{ ever_node_config_dir }}/config.json"
    - "jq '.gc.enable_for_shard_state_persistent = true' {{ ever_node_config_dir }}/config.json > {{ ever_node_config_dir }}/config_tmp.json"
    - "jq '.gc.cells_gc_config.gc_interval_sec = 900' {{ ever_node_config_dir }}/config_tmp.json > {{ ever_node_config_dir }}/config.json"
    - "jq '.gc.cells_gc_config.cells_lifetime_sec = 1800' {{ ever_node_config_dir }}/config.json > {{ ever_node_config_dir }}/config_tmp.json"
    - 'cat {{ ever_node_config_dir }}/config_tmp.json > {{ ever_node_config_dir }}/config.json'
  when: configDirNonEmpty.matched <= 3 or (force_genconfig is defined and force_genconfig == true)

- name: Copy console_template.json
  copy:
    src: console_template.json
    dest: "{{ ever_node_config_dir }}/console_template.json"
    force: no
    owner: "{{ everscale_user }}"
    group: "{{ everscale_group }}"
    mode: u=rw,g=r,o=
  when: configDirNonEmpty.matched <= 3

- name: Generate console.json config
  shell: "{{ item }}"
  #args:
  #  creates: "{{ ever_node_config_dir }}/console.json"
  become: yes
  become_user: "{{ everscale_user }}"
  loop:
    - "jq \".config = $(cat {{ ever_node_config_dir }}/console_config.json)\" {{ ever_node_config_dir }}/console_template.json > {{ ever_node_config_dir }}/console_tmp.json"
    - "jq \".config.client_key = $(jq .private {{ ever_node_config_dir }}/{{ ansible_hostname }}_client_keys.json)\" {{ ever_node_config_dir }}/console_tmp.json > {{ ever_node_config_dir }}/console.json"
  when: configDirNonEmpty.matched <= 3

- name: Delete temp files
  file:
    path: "{{ ever_node_config_dir }}/{{ item }}"
    state: absent
  loop:
    - console_config_tmp.json
    - console_tmp.json
    - config_tmp.json
    - console_template.json

- name: Set correct keys mode
  file:
    path: "{{ item }}"
    state: file
    owner: "{{ everscale_user }}"
    group: "{{ everscale_group }}"
    mode: u=rw,g=r,o=
  loop:
    - "{{ ever_node_config_dir }}/{{ ansible_hostname }}_client_keys.json"
    - "{{ ever_node_config_dir }}/config.json"
    - "{{ ever_node_config_dir }}/console.json"
  when: configDirNonEmpty.matched <= 3

- name: Firewall block
  block:
    - name: Checking firewalld status
      command: systemctl status firewalld
      ignore_errors: yes
      register: firewalld_node_state

    - name: Open node ports with firewalld
      firewalld:
        immediate: yes
        permanent: yes
        port: "{{ item }}"
        state: enabled
        zone: public
      loop:
        - "{{ ever_node_adnl_port }}/udp"
        - "{{ ever_node_console_port }}/tcp"
      when: "'active (running)' in firewalld_node_state.stdout"
  when: ansible_pkg_mgr == "dnf"
  